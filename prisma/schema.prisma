generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  createdAt     DateTime
  updatedAt     DateTime
  emailVerified Boolean
  image         String?
  Form          Form[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Form {
  id             String         @id @default(cuid())
  userId         String
  title          String
  description    String
  buttonText     String
  successMessage String?
  formConfig     Json
  createdAt      DateTime       @default(now())
  lastEdited     DateTime       @default(now())
  viewCount      Int            @default(0)
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics      FormAnalytics?
  submissions    Submission[]

  @@unique([userId, title])
  @@index([userId])
}

model Submission {
  id                        String   @id @default(cuid())
  unique_form_submission_id String   @default(cuid())
  formId                    String
  form                      Form     @relation(fields: [formId], references: [id])
  data                      Json
  country                   String?
  createdAt                 DateTime @default(now())

  @@index([formId])
}

model FormAnalytics {
  id               String             @id @default(cuid())
  formId           String             @unique
  form             Form               @relation(fields: [formId], references: [id])
  totalSubmissions Int                @default(0)
  lastUpdated      DateTime           @updatedAt
  CountryData      CountryData[]
  DailySubmissions DailySubmissions[]

  @@index([formId])
}

model CountryData {
  id              String        @id @default(cuid())
  formAnalyticsId String        
  formAnalytics   FormAnalytics @relation(fields: [formAnalyticsId], references: [id])
  country         String
  count           Int           @default(0)
  @@unique([formAnalyticsId, country])
  @@index([formAnalyticsId])
}

model DailySubmissions {
  id              String   @id @default(cuid())
  formAnalyticsId String
  date            DateTime
  count           Int      @default(1)

  formAnalytics FormAnalytics @relation(fields: [formAnalyticsId], references: [id])

  @@unique([formAnalyticsId, date])
  @@index([formAnalyticsId])
}
